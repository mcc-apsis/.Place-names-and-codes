'feature code','country code','cc2','admin1 code','admin2 code','admin3 code','admin4 code',
'population','elevation','dem','timezone','modification date')
blarg <- read_delim(file='data/allCountries.txt',delim="\t",col_names=z,guess_max=100)
library(readr)
blarg <- read_delim(file='data/allCountries.txt',delim="\t",col_names=FALSE,guess_max=100)
blarg <- read_delim(file='data/allCountries.txt',delim="\t",col_names=FALSE,guess_max=100)
colnames(blarg) <- list('geonameid','name','asciiname','alternatenames','latitude','longitude','feature_class',
'feature_code','country_code','cc2','admin1_code','admin2_code','admin3_code','admin4_code',
'population','elevation','dem','timezone','modification date')
blarg <- blarg %>%
filter(!feature_class='H') %>%
filter(!feature_class='R') %>%
filter(!feature_class='S') %>%
filter(!feature_class='T') %>%
filter(!feature_class='U') %>%
filter(!feature_class='V')
blarg <- blarg %>%
filter(feature_class == 'A' | feature_class == 'L' | feature_class == 'P')
library(tidyverse)
blarg <- blarg %>%
filter(feature_class == 'A' | feature_class == 'L' | feature_class == 'P')
View(blarg)
?search
regions <- blarg %>%
filter(feature_class == 'A')
View(regions)
regions <- blarg %>%
filter(feature_class == 'A') %>%
filter(name == "Brandenburg")
View(regions)
regions <- blarg %>%
filter(name == "Brandenburg")
View(regions)
regions <- blarg %>%
filter(name == "Hessen")
View(regions)
regions <- blarg %>%
filter(country_code='DE') %>%
filter(feature_class='A')
regions <- blarg %>%
filter(country_code=='DE') %>%
filter(feature_class=='A')
regions <- blarg %>%
filter(country_code=='DE') %>%
filter(feature_code=='ADM1')
regions <- blarg %>%
filter(country_code=='AU') %>%
filter(feature_code=='ADM1')
blarg <- blarg %>%
filter(feature_code != 'GRAZ')
blarg <- blarg %>%
filter(!feature_code == 'GRAZ')
blarg %>%
select(feature_code) %>%
ggplot(aes(x=feature_code,y=n())) +
ggbar()
blarg %>%
select(feature_code) %>%
ggplot(aes(x=feature_code,y=n())) +
geom_bar()
blarg %>%
select(feature_code) %>%
summarise(n=n())
blarg %>%
group_by(feature_code) %>%
summarise(n=n())
z<- blarg %>%
group_by(feature_code) %>%
summarise(n=n())
View(z)
regions <- blarg %>%
filter(feature_code=='ADM1')
View(regions)
regions <- blarg %>%
filter(country_code=='GB') %>%
filter(feature_code=='ADM1')
regions <- blarg %>%
filter(country_code=='GB') %>%
filter(feature_code=='ADM2')
regions <- blarg %>%
filter(country_code=='US') %>%
filter(feature_code=='ADM1')
regions <- blarg %>%
filter(country_code=='AD') %>%
filter(feature_class =='A')
regions <- blarg %>%
filter(country_code=='') %>%
filter(feature_class =='PCLI')
regions <- blarg %>%
#  filter(country_code=='') %>%
filter(feature_class =='PCLI')
regions <- blarg %>%
filter(feature_class =='PCLI')
regions <- blarg %>%
filter(feature_code =='PCLI')
View(regions)
??write_csv
write_csv(geonames,'data/',delim="\t")
write_tsv(geonames,'data/')
geonames<-blarg
library(readr)
library(tidyverse)
geonames <- read_delim(file='data/allCountries.txt',delim="\t",col_names=FALSE,guess_max=100)
colnames(geonames) <- list('geonameid','name','asciiname','alternatenames','latitude','longitude','feature_class',
'feature_code','country_code','cc2','admin1_code','admin2_code','admin3_code','admin4_code',
'population','elevation','dem','timezone','modification date')
geonames <- geonames %>%
filter(feature_class == 'A' | feature_class == 'L' | feature_class == 'P')
write_tsv(geonames,'data/')
write_tsv(geonames,'data/geonames.tsv')
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t")
View(geocodes)
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
View(geocodes)
colnameS(geocodes) <- list('code','name','description')
colnames(geocodes) <- list('code','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))')))
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(code=str_extract(code,regex('\\.(.*)'))))
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(code=str_extract(code,regex('\\.(.*)')))
?str_extract
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(code=str_match(code,regex('\\.(.*)')))
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('code','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(code=str_match(code,regex('\\.(.*)')))
rm(geocodes)
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('code','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(code=str_match(code,regex('\\.(.*)')))
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('code','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(blarg=str_match(code,regex('\\.(.*)')))
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('code','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))')))
str_extract("L.OILF",'\\.(.*)')
str_match("L.OILF",'\\.(.*)')
str_match("L.OILF",'\\.(.*)')[,-1]
mutate(blarg=str_match(code,regex('\\.(.*)'))[,-1])
%>%
mutate(blarg=str_match(code,regex('\\.(.*)'))[,-1])
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('code','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(code,regex('.(?=(\\.))'))) %>%
mutate(blarg=str_match(code,regex('\\.(.*)'))[,-1])
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('blarg','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(blarg,regex('.(?=(\\.))'))) %>%
mutate(code=str_match(blarg,regex('\\.(.*)'))[,-1])
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('blarg','name','description')
geocodes <- geocodes %>%
mutate(class=str_extract(blarg,regex('.(?=(\\.))'))) %>%
mutate(code=str_match(blarg,regex('\\.(.*)'))[,-1]) %>%
select(class,code,name,description)
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('blarg','name','description')
geocodes <- geocodes %>%
mutate(feature_class=str_extract(blarg,regex('.(?=(\\.))'))) %>%
mutate(feature_code=str_match(blarg,regex('\\.(.*)'))[,-1]) %>%
select(feature_class,feature_code,name,description) %>%
filter(feature_class == 'A' | feature_class == 'L' | feature_class == 'P')
write_tsv(geocodes,'data/geocodes.tsv')
#http://download.geonames.org/export/dump/ - download allCountries.txt
#http://www.geonames.org/export/codes.html
library(readr)
library(tidyverse)
geonames <- read_delim(file='data/allCountries.txt',delim="\t",col_names=FALSE,guess_max=100)
colnames(geonames) <- list('geonameid','name','asciiname','alternatenames','latitude','longitude','feature_class',
'feature_code','country_code','cc2','admin1_code','admin2_code','admin3_code','admin4_code',
'population','elevation','dem','timezone','modification date')
geonames <- geonames %>%
filter(feature_class == 'A' | feature_class == 'L' | feature_class == 'P')
write_tsv(geonames,'data/geonames.tsv')
###########
z<- geonames %>%
group_by(feature_code) %>%
summarise(n=n())
regions <- geonames %>%
filter(country_code=='') %>%
filter(feature_class =='PCLI')
###########
geocodes <- read_delim(file='data/featureCodes_en.txt',delim="\t",col_names = FALSE)
colnames(geocodes) <- list('blarg','name','description')
geocodes <- geocodes %>%
mutate(feature_class=str_extract(blarg,regex('.(?=(\\.))'))) %>%
mutate(feature_code=str_match(blarg,regex('\\.(.*)'))[,-1]) %>%
select(feature_class,feature_code,name,description) %>%
filter(feature_class == 'A' | feature_class == 'L' | feature_class == 'P')
write_tsv(geocodes,'data/geocodes.tsv')
read_tsv(geocodes,'data/geocodes.tsv')
read_tsv('data/geocodes.tsv')
geocodes <- read_tsv('data/geocodes.tsv')
View(geocodes)
geonames <- read_tsv('data/geonames.tsv')
View(geonames)
View(geocodes)
countries <- geonames %>%
filter(feature_class = 'ADM1')
countries <- geonames %>%
filter(feature_class == 'ADM1')
View(countries)
countries <- geonames %>%
filter(feature_code == 'ADM1')
countries <- geonames %>%
filter(name == 'Germany')
countries <- geonames %>%
filter(feature_code == 'PCL)
countries <- geonames %>%
filter(feature_code == 'PCL')
countries <- geonames %>%
filter(feature_code == 'PCL')
countries <- geonames %>%
filter(name == 'United Kingdom')
countries <- geonames %>%
filter(name == 'United States')
countries <- geonames %>%
filter(name == 'United States of America')
countries <- geonames %>%
filter(name == 'United States')
countries <- geonames %>%
filter(feature_code == 'PCLI')
View(geocodes)
View(geocodes)
View(countries)
countries <- geonames %>%
filter(admin1_code == '00')
countries <- geonames %>%
filter(admin1_code == 'PCLI')
geocodes$description[geocodes$feature_code=='PCLI'] <- "Countries"
countries <- geonames %>%
filter(feature_code == 'PCLH')
countries <- geonames %>%
filter(feature_code == 'PCLI')
new_geonames <- geonames[0,]
View(new_geonames)
isos <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=7:8,header=FALSE)
library(xlsx)
isos <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=7:8,header=FALSE)
View(isos)
clean_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=1:3,header=FALSE)
messy_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=7:8,header=FALSE)
rm(isos)
View(clean_names)
View(messy_names)
clean_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=1:3,header=c("name","iso2","iso3"))
??read.xlsx
??names
names(clean_names) <- c("name","iso2","iso3")
names(messy_names) <- c("name","iso3")
messy_names <- messy_names %>%
group_by(iso3) %>%
mutate(alternatenames = paste(names, collapse=","))
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(alternatenames = paste(names, collapse=","))
messy_names$names <- as.character(messy_names$names)
messy_names <- lapply(messy_names, as.character)
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(alternatenames = paste(names, collapse=","))
messy_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=7:8,header=FALSE)
names(messy_names) <- c("name","iso3")
messy_names$names <- lapply(messy_names$names, as.character)
messy_names <- data.frame(lapply(messy_names, as.character))
messy_names <- data.frame(lapply(messy_names, as.character), stringsAsFactors=FALSE)
View(messy_names)
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(alternatenames = paste(names, collapse=","))
messy_names <- messy_names %>%
group_by(iso3)
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(n=n())
messy_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=7:8,header=FALSE)
names(messy_names) <- c("name","iso3")
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(n=n(),alternatenames = paste(names, collapse=","))
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(n=n(),alternatenames = paste(name, collapse=","))
View(messy_names)
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(n=n(),alternatenames = paste(name, collapse=";"))
messy_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=7:8,header=FALSE)
names(messy_names) <- c("name","iso3")
messy_names <- data.frame(lapply(messy_names, as.character), stringsAsFactors=FALSE)
clean_names <- read.xlsx(file="C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code/ISOcodes.xls",
sheetName="3 letter codes",startRow = 3,colIndex=1:3,header=FALSE)
names(clean_names) <- c("name","iso2","iso3")
messy_names <- messy_names %>%
group_by(iso3) %>%
summarise(n=n(),alternatenames = paste(name, collapse=";"))
blarg <- left_join(clean_names,messy_names,by=c("iso3"=="iso3"))
blarg <- left_join(clean_names,messy_names,by=c("iso3"="iso3"))
View(blarg)
library(tidyverse)
rm(list=ls())
library(tidyverse)
read.csv('ISO-3166-Countries-with-Regional-Codes/all/all.csv')
ISO_master <- read.csv('ISO-3166-Countries-with-Regional-Codes/all/all.csv')
View(ISO_master)
ISO_master <- read.csv('ISO-3166-Countries-with-Regional-Codes/all/all.csv') %>%
select(name,alpha.2,alpha.3,region,sub.region)
View(ISO_master)
library(xlsx)
??write.xlsx
View(ISO_master)
write.xlsx(ISO_master,'output/ISOcodes.xlsx',sheetName='ISO_master')
write.xlsx(ISO_master,'output/ISOcodes.xlsx',sheetName='ISO_master',row.names=FALSE)
ISO_master <- read.csv('ISO-3166-Countries-with-Regional-Codes/all/all.csv',encoding="UTF-8") %>%
select(name,alpha.2,alpha.3,region,sub.region)
write.xlsx(ISO_master,'output/ISOcodes.xlsx',sheetName='ISO_master',row.names=FALSE)
ISO_alts <- read.xlsx('Data/ISOcodes_old.xls',encoding="UTF-8",sheetName = "3 letter codes")
View(ISO_alts)
ISO_alts <- read.xlsx('Data/ISOcodes_old.xls',encoding="UTF-8",sheetName = "3 letter codes",colIndex = 7:8)
View(ISO_alts)
names(ISO_alts) <- c("alternativename","alpha.3")
names(ISO_alts) <- c("alternative.name","alpha.3")
ISO_alts <- ISO_alts %>%
arrange(desc(alpha.3))
ISO_alts <- ISO_alts %>%
arrange(asc(alpha.3))
ISO_alts <- ISO_alts %>%
arrange(alpha.3)
write.xlsx(ISO_alts,'output/ISOcodes.xlsx',sheetName='alternative_names',row.names=FALSE)
rm(list=ls())
library(tidyverse)
library(xlsx)
################## get the current ISO master list from Github (don't forget to pull) ##################
ISO_master <- read.csv('ISO-3166-Countries-with-Regional-Codes/all/all.csv',encoding="UTF-8") %>%
select(name,alpha.2,alpha.3,region,sub.region)
write.xlsx(ISO_master,'output/ISOcodes.xlsx',sheetName='ISO_master',row.names=FALSE)
################## get Julia's extended list of country name alternatives and add ##################
ISO_alts <- read.xlsx('Data/ISOcodes_old.xls',encoding="UTF-8",sheetName = "3 letter codes",colIndex = 7:8)
names(ISO_alts) <- c("alternative.name","alpha.3")
ISO_alts <- ISO_alts %>%
arrange(alpha.3)
write.xlsx(ISO_alts,'output/ISOcodes.xlsx',sheetName='alternative_names',row.names=FALSE)
??write.xlsx
write.xlsx(ISO_alts,'output/ISOcodes.xlsx',sheetName='alternative_names',row.names=FALSE,append=TRUE)
rm(list=ls())
library(tidyverse)
library(xlsx)
################## get the current ISO master list from Github (don't forget to pull) ##################
ISO_master <- read.csv('ISO-3166-Countries-with-Regional-Codes/all/all.csv',encoding="UTF-8") %>%
select(name,alpha.2,alpha.3,region,sub.region)
write.xlsx(ISO_master,'output/ISOcodes.xlsx',sheetName='ISO_master',row.names=FALSE)
################## get Julia's extended list of country name alternatives and add ##################
ISO_alts <- read.xlsx('Data/ISOcodes_old.xls',encoding="UTF-8",sheetName = "3 letter codes",colIndex = 7:8)
names(ISO_alts) <- c("alternative.name","alpha.3")
ISO_alts <- ISO_alts %>%
arrange(alpha.3)
write.xlsx(ISO_alts,'output/ISOcodes.xlsx',sheetName='alternative_names',row.names=FALSE,append=TRUE)
file.copy('output/ISOcodes.xlsx','C:\Users\lamw\Documents\SpiderOak Hive\Work\Code\MATLAB\Handy code')
file.copy('output/ISOcodes.xlsx','C:/Users/lamw/Documents/SpiderOak Hive/Work/Code/MATLAB/Handy code')
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName=alternative_names)
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names')
View(messy_names)
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names') %>%
group_by(alpha.3) %>%
summarise(alternatenames = paste(name, collapse=";"))
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names') %>%
group_by(alpha.3) %>%
summarise(alternative.name = paste(alternative.name, collapse=";"))
clean_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='ISO_master')
View(clean_names)
clean_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='ISO_master',encoding="UTF-8")
blarg <- left_join(clean_names,messy_names,by=c("iso3"="iso3"))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
View(blarg)
geonames <- read_delim(file='data/allCountries.txt',delim="\t",col_names=FALSE,guess_max=100,encoding="UTF-8")
rm(list=ls())
library(readr)
library(tidyverse)
library(xlsx)
geonames <- read_tsv('data/geonames.tsv',encoding="UTF-8")
geonames <- read_tsv('data/geonames.tsv')
new_geonames <- geonames[0,]
countries <- geonames %>%
filter(feature_code == 'PCLI')
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names',encoding="UTF-8") %>%
group_by(alpha.3) %>%
summarise(alternative.name = paste(alternative.name, collapse=";"))
clean_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='ISO_master',encoding="UTF-8")
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
View(countries)
messy_names <- left_join(messy_names,clean_names,by=c("alpha.3"="alpha.3"))
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names',encoding="UTF-8")
clean_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='ISO_master',encoding="UTF-8")
messy_names <- left_join(messy_names,clean_names,by=c("alpha.3"="alpha.3"))
View(messy_names)
messy_names <- messy_names %>%
group_by(alpha.3) %>%
summarise(alternative.name = paste(alternative.name, collapse=";"))
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names',encoding="UTF-8")
clean_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='ISO_master',encoding="UTF-8")
messy_names <- messy_names %>%
group_by(alpha.3) %>%
summarise(alternative.name = paste(alternative.name, collapse=";"))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
?grep
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name <- ifelse(grepl(name,alternative.name),alternative.name,paste(alternative.name,name,collapse=";")))
View(blarg)
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name),alternative.name,paste(alternative.name,name,collapse=";")))
messy_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='alternative_names',encoding="UTF-8")
clean_names <- read.xlsx('output/ISOcodes.xlsx',sheetName='ISO_master',encoding="UTF-8")
messy_names <- messy_names %>%
group_by(alpha.3) %>%
summarise(alternative.name = paste(alternative.name, collapse=";"))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name),alternative.name,paste(alternative.name,name,collapse=";")))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
?ifelse
?paste
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name),alternative.name,paste(alternative.name,name,sep=";")))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name),alternative.name,
paste(alternative.name[!is.na(alternative.name)],name,sep=";")))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(is.na(alternative.name),name,
ifelse(grepl(name,alternative.name),alternative.name,
paste(alternative.name,name,sep=";"))))
is.na(alternative.name)
is.na(blarg$alternative.name)
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name) && !is.na(alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name) && !is.na(alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name) | is.na(alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name) | !is.na(alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- left_join(clean_names,messy_names,by=c("alpha.3"="alpha.3"))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name = ifelse(is.na(alternative.name),name,alternative.name)) %>%
mutate(alternative.name =ifelse(grepl(name,alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name = ifelse(is.na(alternative.name),name,alternative.name))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(z = ifelse(is.na(alternative.name),name,alternative.name))
blarg$name <- as.factor(blarg$name)
blarg$name <- as.character(blarg$name)
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name = ifelse(is.na(alternative.name),name,alternative.name))
blarg <- blarg %>%
group_by(alpha.3) %>%
mutate(alternative.name = ifelse(is.na(alternative.name),name,alternative.name)) %>%
mutate(alternative.name = ifelse(grepl(name,alternative.name),alternative.name,
paste(alternative.name,name,sep=";")))
View(new_geonames)
View(countries)
geonames <- read_delim(file='data/allCountries.txt',delim="\t",col_names=FALSE,guess_max=100,encoding="UTF-8")
